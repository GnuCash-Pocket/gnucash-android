/*
 * Copyright (c) 2013 - 2015 Ngewi Fet <ngewif@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gnucash.android.export

import android.net.Uri
import androidx.core.net.toUri
import org.gnucash.android.util.TimestampHelper
import java.sql.Timestamp

/**
 * Encapsulation of the parameters used for exporting transactions.
 * The parameters are determined by the user in the export dialog and are then transmitted to the asynchronous task which
 * actually performs the export.
 *
 * @author Ngewi Fet <ngewif@gmail.com>
 * @see org.gnucash.android.ui.export.ExportFormFragment
 *
 * @see ExportAsyncTask
 */
class ExportParams() {
    /**
     * Options for the destination of the exported transactions file.
     * It could be stored on the [.SD_CARD] or exported through another program via [.SHARING]
     */
    enum class ExportTarget {
        URI,
        DROPBOX,
        OWNCLOUD,
        SHARING,
        SD_CARD
    }

    /**
     * Format to use for the exported transactions
     * By default, the [ExportFormat.XML] format is used
     */
    var exportFormat: ExportFormat = ExportFormat.XML

    /**
     * All transactions created after this date will be exported
     */
    var exportStartTime: Timestamp = TimestampHelper.timestampFromEpochZero

    /**
     * Flag to determine if all transactions should be deleted after exporting is complete
     * By default no transactions are deleted
     */
    var deleteTransactionsAfterExport = false

    /**
     * Destination for the exported transactions
     */
    var exportTarget: ExportTarget = ExportTarget.SD_CARD

    /**
     * Location to save the file name being exported.
     * This is typically a Uri and used for [ExportTarget.URI] target
     */
    var exportLocation: Uri? = null

    /**
     * CSV-separator character
     */
    var csvSeparator: Char = CSV_COMMA

    /**
     * Compress the file using gzip?
     */
    var isCompressed: Boolean = false

    /**
     * Creates a new set of parameters and specifies the export format
     *
     * @param format Format to use when exporting the transactions
     */
    constructor(format: ExportFormat) : this() {
        this.exportFormat = format
    }

    override fun toString(): String {
        return "Export all transactions created since " +
                TimestampHelper.getUtcStringFromTimestamp(exportStartTime) +
                " UTC as " + exportFormat + " to " + exportTarget +
                (if (exportLocation != null) " ($exportLocation)" else "")
    }

    /**
     * Returns the export parameters formatted as CSV.
     *
     * The CSV format is: exportformat;exportTarget;shouldExportAllTransactions;shouldDeleteAllTransactions
     *
     * @return String containing CSV format of ExportParams
     */
    fun toTag(): String {
        return (exportFormat.name
                + TAG_SEPARATOR + exportTarget.name
                + TAG_SEPARATOR + TimestampHelper.getUtcStringFromTimestamp(this.exportStartTime)
                + TAG_SEPARATOR + deleteTransactionsAfterExport
                + TAG_SEPARATOR + (if (this.exportLocation != null) this.exportLocation else "")
                + TAG_SEPARATOR + isCompressed)
    }

    companion object {
        private const val TAG_SEPARATOR = ";"

        const val CSV_COMMA: Char = ','
        const val CSV_COLON: Char = ':'
        const val CSV_SEMICOLON: Char = ';'

        /**
         * Parses csv generated by [.toTag] to create
         *
         * @param tag String containing list of params
         * @return ExportParams from the tag
         */
        fun parseTag(tag: String): ExportParams {
            val tokens: Array<String> =
                tag.split(TAG_SEPARATOR.toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
            val params = ExportParams(ExportFormat.of(tokens[0]))
            params.exportTarget = ExportTarget.valueOf(tokens[1])
            params.exportStartTime = TimestampHelper.getTimestampFromUtcString(tokens[2])
            params.deleteTransactionsAfterExport = tokens[3].toBoolean()
            if (tokens.size >= 5) {
                params.exportLocation = tokens[4].toUri()
                if (tokens.size >= 6) {
                    params.isCompressed = tokens[5].toBoolean()
                }
            }
            return params
        }
    }
}
